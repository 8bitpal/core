require 'csv'

class BankStatement < ActiveRecord::Base

  belongs_to :distributor

  mount_uploader :statement_file, BankStatementUploader


  def process_statement!(customers_ids)
    it=0
    CSV.foreach(statement_file.path, :headers => :first_row) do |row|
      if row['Amount'].to_i > 0
        create_payment!(row, customers_ids[it.to_s]) unless customers_ids[it.to_s].blank?
        it+=1
      end
    end
  end

  def customer_remembers
    remembers = {}
    it = 0
    CSV.foreach(statement_file.path, :headers => :first_row) do |row|
      if row['Amount'].to_i > 0
        r = row['Reference']
        remembers["#{it}"] = r ? customer_for_reference(r) : nil
        it+=1
      end
    end
    remembers
  end

  
  private
  def create_payment!(row, customer_id)
    account = distributor.accounts.where('customer_id = ?', customer_id).first
    account = Account.create!(distributor: distributor, customer: Customer.find(customer_id)) unless account
    Payment.create!(
      distributor: distributor, 
      account: account, 
      kind: "bank_transfer", 
      description: "Payment generated by CSV import", 
      amount: row['Amount'], 
      statement_id: id,
      reference: row['Reference']
    )
    remove_statement_file!
  end

  def customer_for_reference(ref)
    payment = Payment.where('reference = ? and distributor_id = ?', ref, distributor.id).last
    payment ? payment.account.customer.id : nil
  end
end
