class Payment < ActiveRecord::Base
  belongs_to :distributor
  belongs_to :account

  has_one :customer, :through => :account

  composed_of :amount,
    :class_name => "Money",
    :mapping => [%w(amount_cents cents), %w(currency currency_as_string)],
    :constructor => Proc.new { |cents, currency| Money.new(cents || 0, currency || Money.default_currency) },
    :converter => Proc.new { |value| value.respond_to?(:to_money) ? value.to_money : raise(ArgumentError, "Can't convert #{value.class} to Money") }

  attr_accessible :account, :account_id, :amount, :kind, :description, :distributor

  KINDS = %w(bank_transfer credit_card manual)

  validates_presence_of :distributor, :account, :amount, :kind, :description
  validates_inclusion_of :kind, :in => KINDS, :message => "%{value} is not a valid kind of payment"
  validates_numericality_of :amount, :greater_than => 0

  after_create :update_account

  scope :bank_transfer, where(:kind => 'bank_transfer')
  scope :credit_card, where(:kind => 'credit_card')
  scope :manual, where(:kind => 'manual')

  def update_account
    account.add_to_balance(amount, :kind => 'payment', :description => "[ID##{id}] Recieved a payment by #{kind.humanize.downcase}.")
    account.save
  end

  def self.create_from_csv!(distributor, csv, customers)
    file = File.open(csv.path,'r')
    it = 0
    file.each_line("\n") do |line|
      row = line.split(",")
      if row[1].to_i && row[1].to_i > 0
        self.create_payment!(distributor, row, customers[it.to_s]) unless customers[it.to_s].blank?
      end
      it += 1
    end
  end

  # CSV line format
  # "Date", "Amount", "Payee", "Particulars", "Code", "Reference", "Tran Type"
  def self.create_payment!(distributor, row, customer_id)
    amount = row[1].to_i
    account = distributor.accounts.where('customer_id = ?', customer_id).first
    account = Account.create!(distributor_id: distributor.id, customer_id: customer_id) unless account
    self.create!(distributor: distributor, account: account, kind: "bank_transfer", description: "Payment generated by CSV import", amount: amount)
  end
end
