= simple_form_for(@form_params, html: { id: 'order-form' }) do |f|
  = f.error_notification
  - if @order.has_yellow_deliveries?
    .alert.alert-error This order has an impending delivery, changes made will only affect the deliveries on or after #{current_distributor.beginning_of_green_zone.to_s(:day_date_month)}.

  .row-fluid
    .span6
      = f.association :box, collection: box_collection(@customer, with_price: true), include_blank: false, input_html: { class: 'box' }

      - unless @order.persisted?
        = f.simple_fields_for(:schedule_rule) do |sf|
          = sf.input :start, label: 'Start date', collection: @delivery_service.start_dates, include_blank: false

          = sf.input :recur, label: 'Frequency', collection: order_frequencies, include_blank: false, input_html: { class: 'frequency' }

      #likes_dislikes_limits{data: {limits: @order.limits_data}}
      #dislikes-input
        = f.full_error(:exclusions)
        = f.input :excluded_line_item_ids, label: 'Exclusions', collection: @stock_list, as: :select, :input_html => { :multiple => true }, placeholder: "Exclude these items..."
      #likes-input
        = f.full_error(:substitutions)
        = f.input :substituted_line_item_ids, label: 'Substitutes', collection: @stock_list, as: :select, :input_html => { :multiple => true}, placeholder: "Substitute for these items..."

      .order_extras
        :javascript
          var current_account_id = #{@account.id};
        = render partial: 'extras', locals: { account: @account, order: @order, box: @order.box || box_collection(@customer).first }

    .span6
      - unless @order.persisted?
        = f.simple_fields_for(:schedule_rule) do |sf|
          - if @order.schedule_rule.errors.present?
            .alert.alert-error= @order.schedule_rule.errors.full_messages.join(", ")

          = sf.hidden_field :week, value: 0

          %table.order-days.table.table-bordered
            %tbody
              - Order.dates_grid.each_with_index do |week, index|
                %tr
                  %td #{index.succ.ordinalize}
                  - week.each do |day, number|
                    %td
                      - input_name = day.downcase
                      - wrapper_id = "day-#{number}"
                      = sf.input input_name, label: day, as: :boolean, input_html: { data: { week: number/7, enabled: @delivery_service.runs_on(number) } }, wrapper_html: { id: wrapper_id }, disabled: !@delivery_service.runs_on(number)

  .row-fluid
    .span12.form-actions
      = f.button :submit, "Save", class: 'btn btn-primary', 'data-loading-text' => "Saving order...", 'data-toggle' => 'button', onclick: '$(this).button("loading");'
      or
      = link_to 'cancel', distributor_customer_path(@account.customer)

