%h2 Customer Payments

#upload_more_transactions.reveal-modal
  = simple_form_for(@import_transaction_list, url: match_payments_distributor_payments_path, html: {:multipart => true} ) do |f|
    %fieldset
      %legend Import data from your bank
      %p Please select the bank statement provided by your bank (.csv file)
      = f.error_notification
      - if @import_transaction_list.csv_parser.present? && !@import_transaction_list.csv_parser.rows.reject(&:valid?).size.zero?
        %span.error= @import_transaction_list.csv_parser.rows.find(&:invalid?).errors.full_messages.join(', ')
      = f.input :file_format, as: :select, collection: ImportTransactionList::FILE_FORMATS, label: "CSV File Format", include_blank: false
      = f.input :csv_file, label: false

      .actions
        = f.button :submit, "Upload"

.row
  .twelve.columns
    %table.payments
      %thead
        %tr
          %th Date
          %th{width: '400px'} Description
          %th Amount
          %th Account
          %th Customer
          %th
      %tbody
        %tr.row_action
          %td{colspan: 6}= link_to((@import_transactions.blank? ? "Import transactions" : "Import more transactions"), "", {'data-reveal-id'=> 'upload_more_transactions', id: 'upload_more_transactions_link'})
        - if @import_transactions.blank?
          - @import_transaction_lists.each do |import_transaction_list|
            %tr
              %td{colspan: 6}
                = render partial: 'draft_transactions', locals: {import_transaction_list: import_transaction_list}
        - @import_transactions.each do |import_transaction|
          - if (@current_draft_import_transaction_list = show_draft_import_transaction_list(import_transaction, @import_transaction_lists)).present?
            - @current_draft_import_transaction_list.each do |import_transaction_list|
              %tr
                %td{colspan: 6}
                  = render partial: 'draft_transactions', locals: {import_transaction_list: import_transaction_list}
          - if false#@import_transaction_list.errors.present?
            .row.errors
              = @import_transaction_list.errors.full_messages.join(", ")
          %tr{class: (import_transaction.matched? ? "row_description" : "row_description not_a_customer"),id: "import_transaction_#{import_transaction.id}", 'data-row-id' => import_transaction.id}
            %td= import_transaction.transaction_date.to_s(:transaction)
            %td= import_transaction.description
            %td= import_transaction.amount.format
            %td= import_transaction.account
            %td{colspan: 2, id: "edit_row_match_#{import_transaction.id}"}
              = render partial: 'processed_row_detail', locals: {import_transaction: import_transaction}

          %tr.row_details{style: "display: none;"}
            %td
            %td
              - import_transaction.raw_data.each do |key, value|
                %div= "#{key.to_s.humanize}: #{value}"
            %td
            %td
            %td.remove{colspan: 2}= link_to("remove transaction", distributor_payment_path(import_transaction), method: :delete, confirm: "This will also reverse any changes made to customer accounts", remote: true)
        %tr.row_action
          %td{colspan: 6}= link_to_function "load more", "window.payments.load_more_rows_on_bottom()" unless @import_transactions.blank?

- if @import_transaction_list.csv_parser.present? && !@import_transaction_list.csv_parser.rows.reject(&:valid?).size.zero?
  :javascript
    $(function() {
      $("#upload_more_transactions_link").click();
    })
