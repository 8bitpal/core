module OrdersHelper
  def order_customisation(order)
    description = order.customisation_description
    content_tag(:span, truncate(description), title: description)
  end

  def order_extras(order)
    description = order.extras_description(true)
    content_tag(:span, truncate(description), title: description)
  end

  def order_frequencies
    Order::FREQUENCIES.map { |frequencies| [frequencies.titleize, frequencies] }
  end

  def order_delete_warning(order)
    no_deliveries_confirm = "Are you sure you would like to deactivate this order? It will no longer generate deliveries."
    deliveries_confirm = "WARNING\r\rSorry some deliveries generated by this order could not be deleted as they are already for packing and delivery."

    order.deliveries.size > 0 ? deliveries_confirm : no_deliveries_confirm
  end

  def order_schedule(order, options = {})
    joiner = (options[:join_with].nil? ? '<br/>' : options[:join_with])
    schedule = order.schedule
    string_schedule = []

    unless options[:recurrence_rules] == false || schedule.recurrence_rules.empty?
      string_schedule << schedule.recurrence_rules.join(', ')
    end

    unless options[:recurrence_times] == false || schedule.recurrence_times.empty?
      string_schedule << 'Single delivery order'
    end

    unless options[:exception_rules] == false || schedule.exception_rules.empty?
      string_schedule << schedule.exception_rules.join(', ')
    end

    unless options[:exception_times] == false || schedule.exception_times.empty?
      et = schedule.exception_times
      first_et = et.first
      last_et = (et.last + 1.day) # this is shown as the resume day so a day after the last exception date
      exception_times = "pausing on #{first_et.to_s(:month_date_year)}#{joiner}resuming on #{last_et.to_s(:month_date_year)}".html_safe
      string_schedule << "#{link_to exception_times, '#', data: {'reveal-id' => "pause-modal-#{order.id}"}}"
    end

    return string_schedule.join(joiner).html_safe
  end

  def order_pause_date_formatted(order)
    date = order.pause_date
    return date.nil? ? '' : date.to_s(:pause)
  end

  def order_resume_date_formatted(order)
    date = order.resume_date
    return date.nil? ? '' : date.to_s(:pause)
  end

  def all_order_start_dates(distributor, count = 14)
    next_occurrences = distributor.routes.inject([]) { |a,r| a += order_start_dates(r, count); a }
    return next_occurrences.uniq.sort{ |a,b| a[1] <=> b[1] }
  end

  def order_start_dates(route, count = 28)
    from_time = route.distributor.window_end_at.to_time_in_current_zone
    next_occurrences = route.schedule.next_occurrences(count, from_time)

    return next_occurrences.map { |time| [time.strftime("%A, %B %d, %Y"), time.to_date] }
  end

  def order_delete_warning(order)
    no_deliveries_confirm = "Are you sure you would like to deactivate this order? It will no longer generate deliveries."
    deliveries_confirm = "WARNING\r\rSorry some deliveries generated by this order could not be deleted as they are already for packing and delivery."

    return order.deliveries.size > 0 ? deliveries_confirm : no_deliveries_confirm
  end
end
