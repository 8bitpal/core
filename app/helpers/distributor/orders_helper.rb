module Distributor::OrdersHelper
  def order_frequencies
    Order::FREQUENCIES.map{ |frequencies| [frequencies.titleize, frequencies] }
  end

  def all_order_start_dates(distributor, count = 14)
    next_occurrences = distributor.routes.inject([]) { |a,r| a += order_start_dates(r, count); a }
    return next_occurrences.uniq.sort{ |a,b| a[1] <=> b[1] }
  end

  def order_start_dates(route, count = 28)
    from_time = route.distributor.window_end_at.to_time_in_current_zone
    next_occurrences = route.schedule.next_occurrences(count, from_time)

    return next_occurrences.map { |time| [time.strftime("%A, %B %d, %Y"), time.to_date] }
  end

  def order_delete_warning(order)
    no_deliveries_confirm = "Are you sure you would like to deactivate this order? It will no longer generate deliveries."
    deliveries_confirm = "WARNING\r\rSorry some deliveries generated by this order could not be deleted as they are already for packing and delivery."

    return order.deliveries.size > 0 ? deliveries_confirm : no_deliveries_confirm
  end
end
